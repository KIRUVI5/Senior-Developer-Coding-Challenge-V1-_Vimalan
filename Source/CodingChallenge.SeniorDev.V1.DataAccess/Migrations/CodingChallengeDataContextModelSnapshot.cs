// <auto-generated />
using System;
using CodingChallenge.SeniorDev.V1.DataAccess.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodingChallenge.SeniorDev.V1.DataAccess.Migrations
{
    [DbContext(typeof(CodingChallengeDataContext))]
    partial class CodingChallengeDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Course", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumStudentLimit")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = new Guid("97600ec6-fb99-4e0e-a501-6e2ad0de3895"),
                            Description = "Computer Science",
                            IsDeleted = false,
                            MaximumStudentLimit = 15,
                            Subject = "AI",
                            TeacherID = new Guid("f55d4e5c-0636-43e1-a770-2e8f170b0500"),
                            Title = "Computer Science"
                        },
                        new
                        {
                            ID = new Guid("6eced36f-0bcc-4b1e-9f46-1fefa0881cc6"),
                            Description = "Physical Science",
                            IsDeleted = false,
                            MaximumStudentLimit = 15,
                            Subject = "Engineering Drawing",
                            TeacherID = new Guid("5db11e34-33ee-4c48-9537-b1e56f33ca01"),
                            Title = "Physical Science"
                        });
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Student", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Birthdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NICNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NICNo")
                        .IsUnique()
                        .HasFilter("[NICNo] IS NOT NULL");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = new Guid("e4f1d5c8-3c6b-469e-b584-4c9aeb7f4e6a"),
                            Birthdate = new DateTimeOffset(new DateTime(1991, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "kiruvi5@gmail.com",
                            FirstName = "Vimalan",
                            IsDeleted = false,
                            LastName = "Kumarakulasingam",
                            NICNo = "91781472325v",
                            RegistrationID = "ST001"
                        },
                        new
                        {
                            ID = new Guid("e3462baa-cda0-4c17-b02d-f5e28aab83f9"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "Andrew@gmail.com",
                            FirstName = "hari",
                            IsDeleted = false,
                            LastName = "Andrew",
                            NICNo = "92147872325v",
                            RegistrationID = "ST002"
                        },
                        new
                        {
                            ID = new Guid("e6f6a7b4-463d-48ff-a7b2-9e680f5ffa0a"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "ilanko@gmail.com",
                            FirstName = "nimal",
                            IsDeleted = false,
                            LastName = "ilanko",
                            NICNo = "93671472325v",
                            RegistrationID = "ST003"
                        },
                        new
                        {
                            ID = new Guid("36dca186-bd97-4da7-9a3f-877ba9b51c0b"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "mohan@gmail.com",
                            FirstName = "venkat",
                            IsDeleted = false,
                            LastName = "mohan",
                            NICNo = "941478972325v",
                            RegistrationID = "ST004"
                        },
                        new
                        {
                            ID = new Guid("18fda881-da8c-4cb2-a929-b3b901c9909d"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "theja@gmail.com",
                            FirstName = "raj",
                            IsDeleted = false,
                            LastName = "theja",
                            NICNo = "96146772325v",
                            RegistrationID = "ST005"
                        },
                        new
                        {
                            ID = new Guid("df3cedb1-23b4-4759-ac1e-b8237bc5c8d7"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "shan@gmail.com",
                            FirstName = "karan",
                            IsDeleted = false,
                            LastName = "shan",
                            NICNo = "971454372325v",
                            RegistrationID = "ST006"
                        },
                        new
                        {
                            ID = new Guid("bc4e0df4-e6f9-486b-b2f2-4f436e51d777"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "asanka@gmail.com",
                            FirstName = "ravi",
                            IsDeleted = false,
                            LastName = "asanka",
                            NICNo = "9561472325v",
                            RegistrationID = "ST007"
                        },
                        new
                        {
                            ID = new Guid("90217a07-92bc-428b-97c0-5fad0c7ef03c"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "nisan@gmail.com",
                            FirstName = "mathan",
                            IsDeleted = false,
                            LastName = "nisan",
                            NICNo = "926781472325v",
                            RegistrationID = "ST008"
                        },
                        new
                        {
                            ID = new Guid("5391b718-784a-4c15-a72d-4c5a4c35a488"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "kannan@gmail.com",
                            FirstName = "juvi",
                            IsDeleted = false,
                            LastName = "kannan",
                            NICNo = "95764621472325v",
                            RegistrationID = "ST009"
                        },
                        new
                        {
                            ID = new Guid("709d37b5-685d-4afa-acda-4835c2cfef6d"),
                            Birthdate = new DateTimeOffset(new DateTime(1992, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "ari@gmail.com",
                            FirstName = "ari",
                            IsDeleted = false,
                            LastName = "mohan",
                            NICNo = "921897472325v",
                            RegistrationID = "ST0010"
                        });
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.StudentCourses", b =>
                {
                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentID = new Guid("18fda881-da8c-4cb2-a929-b3b901c9909d"),
                            CourseID = new Guid("97600ec6-fb99-4e0e-a501-6e2ad0de3895"),
                            IsDeleted = false
                        },
                        new
                        {
                            StudentID = new Guid("709d37b5-685d-4afa-acda-4835c2cfef6d"),
                            CourseID = new Guid("6eced36f-0bcc-4b1e-9f46-1fefa0881cc6"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Teacher", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Birthdate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            ID = new Guid("f55d4e5c-0636-43e1-a770-2e8f170b0500"),
                            Birthdate = new DateTimeOffset(new DateTime(1981, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "Mano@gmail.com",
                            FirstName = "Mano",
                            IsDeleted = false,
                            LastName = "Raj"
                        },
                        new
                        {
                            ID = new Guid("5db11e34-33ee-4c48-9537-b1e56f33ca01"),
                            Birthdate = new DateTimeOffset(new DateTime(1985, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 5, 30, 0, 0)),
                            Email = "Ragu@gmail.com",
                            FirstName = "Ragu",
                            IsDeleted = false,
                            LastName = "Paramesh"
                        });
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Course", b =>
                {
                    b.HasOne("CodingChallenge.SeniorDev.V1.Common.Entity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.StudentCourses", b =>
                {
                    b.HasOne("CodingChallenge.SeniorDev.V1.Common.Entity.Course", null)
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodingChallenge.SeniorDev.V1.Common.Entity.Student", null)
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Course", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("CodingChallenge.SeniorDev.V1.Common.Entity.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
